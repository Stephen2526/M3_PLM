# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: env_lightning

channels:
  - pytorch
  - conda-forge
  - defaults
  - salilab

#  - anaconda
#  - pypi
#  - pyg

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - conda-forge::python=3.9
  - conda-forge::setuptools=59.5.0
  - conda-forge::pip
  - conda-forge::pdbfixer
  - conda-forge::cudatoolkit==11.3.*
  - conda-forge::lightning
  - pytorch::pytorch=1.12.*
  - torchmetrics
  - hydra-core
  - rich
  - pre-commit
  - pytest
  - conda-forge::msms
  - salilab::dssp=3.0.0
  - libboost=1.73.0
  - conda-forge::openjdk=11.0.*

  # - scipy
  # - scikit-learn
  # - tqdm
  # - sentry-sdk=1.3.1
  # - biopython
  # - pyg=2.*

  # --------- loggers --------- #
  - wandb
  # - neptune-client
  # - mlflow
  # - comet-ml
  # - aim>=3.16.2 # no lower than 3.16.2, see https://github.com/aimhubio/aim/issues/2550
  
  - pip:
      - hydra-optuna-sweeper
      - hydra-colorlog
      - rootutils
      - biopython
      - numpy
      - pandas
      - requests
      - scipy
      - tqdm
      - dm-tree
      - mdtraj
      - networkx

      # pkg used by tranception
      - transformers
      - tokenizers
      - datasets
      # - aiohttp
      # - sentencepiece
